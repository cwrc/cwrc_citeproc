<?php

/**
 * @file
 * CWRC citeproc module file.
 */

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 */
function cwrc_citeproc_block_view_islandora_blocks_citation_alter(&$data, $block) {
  if (!empty($data['content'])) {
    $object = menu_get_object('islandora_object', 2);
    $style = variable_get('islandora_blocks_citation_style', '');
    if (empty($object) || !$style) {
      return;
    }

    $object_id = $object->id;
    $container_id = 'cwrc-citeproc-bibliography-wrapper-' . drupal_clean_css_identifier($object_id);
    $items = [$object_id => $object['MODS']->content];
    $content = [
      '#markup' => t('<div id="@container_id"></div>', [
        '@container_id' => $container_id,
      ]),
      '#attached' => _cwrc_citeproc_get_js_attach($style, $items),
    ];

    $data['content'] = drupal_render($content);
  }
}

/**
 * Implements hook_convert_mods_to_citeproc_jsons_alter().
 */
function cwrc_citeproc_convert_mods_to_citeproc_jsons_alter(array &$output, SimpleXMLElement $mods) {
  module_load_include('inc', 'citeproc', 'includes/converter');

  if (empty($output['page']) && ($page = _cwrc_citeproc_convert_mods_to_citeproc_json_page($mods))) {
    $output['page'] = $page;
  }

  // Checking volume.
  if (empty($output['volume']) && ($volume = _cwrc_citeproc_convert_mods_to_citeproc_json_volume_issue($mods, 'volume'))) {
    $output['volume'] = $volume;
  }

  // Checking issue.
  if (empty($output['issue']) && ($issue = _cwrc_citeproc_convert_mods_to_citeproc_json_volume_issue($mods, 'issue'))) {
    $output['issue'] = $issue;
  }

  // Checking publisher.
  if (empty($output['publisher'])) {
    $query = '//mods:originInfo/mods:publisher';
    $publisher = $mods->xpath($query);
    $publisher = isset($publisher[0]) ? (string) $publisher[0] : NULL;
    if ($publisher) {
      $output['publisher'] = $publisher;
    }
  }

  // Using copyright date when issued no available but publisher info provided.
  if (!empty($output['publisher']) && isset($output['issued']['string-literal'])) {
    // Try to use copyright date
    $query = '/mods:mods/mods:relatedItem[1]/mods:originInfo/mods:copyrightDate | //mods:originInfo/mods:copyrightDate';
    $copyright_date = convert_mods_to_citeproc_json_query($mods, $query);
    if ($copyright_date && _cwrc_citeproc_get_valid_date($copyright_date)) {
      _try_parse_date($output['issued'], $copyright_date);
    }
  }

  // Checking accessed when no issued date is provided.
  if (empty($output['accessed'])) {
    $path = '/mods:mods/mods:location/mods:url[1]/@dateLastAccessed';
    $result = $mods->xpath($path);
    $result = !empty($result[0]) ? (string) $result[0] : '';
    $date = $result ? _cwrc_citeproc_get_valid_date($result) : '';
    if ($date) {
      $accessed = array('accessed' => array());
      _try_parse_date($accessed['accessed'], $date);
      $output['accessed'] = $accessed['accessed'];
    }
  }

  if (empty($output['edition'])) {
    $query = '/mods:mods/mods:relatedItem[1]/mods:originInfo/mods:edition';
    $edition = convert_mods_to_citeproc_json_query($mods, $query);
    if ($edition && is_string($edition)) {
      $output['edition'] = $edition;
    }
  }
}

/**
 * Gets citeproc locale name from the citeproc-php library.
 *
 * @return false|string
 *   The file name or FALSE if not found.
 */
function _cwrc_citeproc_get_locales_file_name() {
  global $language;
  $lang = $language->language;
  $citeproc_php_path = libraries_get_path('citeproc-php');
  $lang_bases = array(
    'af' => "af-ZA",
    'ar' => 'ar-AR',
    'bg' => 'bg-BG',
    'ca' => 'ca-AD',
    'cs' => 'cs-CZ',
    'da' => 'da-DK',
    'de' => 'de-DE',
    'el' => 'el-GR',
    'en' => 'en-GB',
    'en' => 'en-US',
    'es' => 'es-ES',
    'et' => 'et-EE',
    'fa' => 'fa-IR',
    'fi' => 'fi-FI',
    'fr' => 'fr-FR',
    'he' => 'he-IL',
    'hu' => 'hu-HU',
    'is' => 'is-IS',
    'it' => 'it-IT',
    'ja' => 'ja-JP',
    'km' => 'km-KH',
    'ko' => 'ko-KR',
    'mn' => 'mn-MN',
    'nb' => 'nb-NO',
    'nl' => 'nl-NL',
    'nn' => 'nn-NO',
    'pl' => 'pl-PL',
    'pt' => 'pt-PT',
    'ro' => 'ro-RO',
    'ru' => 'ru-RU',
    'sk' => 'sk-SK',
    'sl' => 'sl-SI',
    'sr' => 'sr-RS',
    'sv' => 'sv-SE',
    'th' => 'th-TH',
    'tr' => 'tr-TR',
    'uk' => 'uk-UA',
    'vi' => 'vi-VN',
    'zh' => 'zh-CN',
  );

  return isset($lang_bases[$lang]) ? file_get_contents($citeproc_php_path . '/locale/locales-' . $lang_bases[$lang] . '.xml') : file_get_contents($citeproc_php_path . '/locale/locales-en-US.xml');
}

/**
 * Helper function to extract pages from mods.
 *
 * @param $mods
 *   The mods element.
 *
 * @return string|null
 *   The pages.
 */
function _cwrc_citeproc_convert_mods_to_citeproc_json_page($mods) {
  $output = '';

  $pages = $mods->xpath("//mods:relatedItem[1]/mods:part/mods:extent[@unit='pages']");

  // Note: "pages" is correct, but Zotero uses "page".
  if (empty($pages)) {
    $pages = $mods->xpath("//mods:relatedItem[1]/mods:part/mods:extent[@unit='page']");
  }

  $pages = !empty($pages) ? $pages[0] : NULL;
  if ($pages) {
    module_load_include('inc', 'citeproc', 'includes/converter');
    add_mods_namespace($pages);
    $total = $pages->xpath('mods:total');
    $total = !empty($total) ? (string) $total[0] : NULL;
    $list = $pages->xpath('mods:list');
    $list = !empty($list) ? (string) $list[0] : NULL;
    $start = $pages->xpath('mods:start');
    $start = !empty($start) ? (string) $start[0] : NULL;
    $end = $pages->xpath('mods:end');
    $end = !empty($end) ? (string) $end[0] : NULL;
    if ($total) {
      $output = $total;
    }
    elseif ($list) {
      $output = $list;
    }
    elseif ($start) {
      $output = $start;
      if ($end) {
        $output .= "-" . $end;
      }
    }
  }
  return $output;
}

/**
 * Helper function to extract the volume or issue from mods.
 *
 * @param $mods
 *   The mods.
 * @param $type
 *   Either we issue or volume.
 *
 * @return int|string
 *   The volume number.
 */
function _cwrc_citeproc_convert_mods_to_citeproc_json_volume_issue($mods, $type) {
  $number_value = '';
  if ($mods) {
    $query = "//mods:part/mods:detail[@type='{$type}']";
    $number = $mods->xpath($query);
    $number = !empty($number) ? $number[0] : NULL;
    if ($number) {
      module_load_include('inc', 'citeproc', 'includes/converter');
      add_mods_namespace($number);
      $number = $number->xpath('mods:number');
      if(isset($number[0])) {
        $number_value = (int) $number[0];
        // The above will return zero if number is roman numeral then let try to
        // upcast it into string below.
        if (!$number_value) {
          $number_value = (string) $number[0];
        }
      }
    }
  }

  return $number_value;
}

/**
 * Helper function to validate a date string.
 *
 * @param string $str_date
 *   The date.
 * @param string $format
 *   The format.
 *
 * @return false|string
 *   The validated date or false when validation fail.
 */
function _cwrc_citeproc_get_valid_date($str_date, $format = 'j m. Y') {
  $timestamp = strtotime($str_date);
  $date = date($format, $timestamp);
  $d = DateTime::createFromFormat($format, $date);
  return ($d && $d->format($format) === $date) ? date('Y-m-d', $timestamp) : '';
}

/**
 * Gets the js attachment to process the citeproc.
 *
 * @param $style
 *   The citeproc style file.
 * @param $items
 *   The object items.
 * @param string $container_id
 *   Container wrapper id.
 *
 * @return array
 *   The attachment array.
 */
function _cwrc_citeproc_get_js_attach($style, $items) {
  $citation_items = array();
  $module_name = 'cwrc_citeproc';
  $path = drupal_get_path('module', $module_name) . '/js';
  $citeproc_style = citeproc_style($style);

  module_load_include('inc', 'citeproc', 'includes/converter');
  foreach ($items as $object_id => $mods_content) {
    $raw = convert_mods_to_citeproc_jsons($mods_content);
    $raw = _citeproc_array_to_object($raw);
    // Adding id based on the object.
    $raw->id = $object_id;

    $item_container_id = 'cwrc-citeproc-bibliography-wrapper-' . drupal_clean_css_identifier($object_id);
    $citation_items[$object_id]['id'] =  $item_container_id;
    $citation_items[$object_id]['raw'] = $raw;
  }

  $js_settings[$module_name] = array(
    'style' => $citeproc_style,
    'locale_xml' => _cwrc_citeproc_get_locales_file_name(),
    'items' => $citation_items,
    'item_ids' => array_keys($items),
  );

  $attach = array(
    'js' => array(
      array('type' => 'setting', 'data' => $js_settings),
      $path . '/citeproc.js',
      $path . '/init.js',
    ),
  );

  return $attach;
}
